{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863 \u8fd9\u662f\u6211\u7684\u535a\u5ba2\u7684\u4e3b\u9875\u3002 \u6587\u7ae0\u5217\u8868 JMH String Concatenation Benchmark \u5176\u4ed6\u5185\u5bb9","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u7684\u535a\u5ba2\u7684\u4e3b\u9875\u3002","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863"},{"location":"#_2","text":"JMH String Concatenation Benchmark","title":"\u6587\u7ae0\u5217\u8868"},{"location":"#_3","text":"","title":"\u5176\u4ed6\u5185\u5bb9"},{"location":"jmh/string-concat-jmh-benchmark/","text":"Java \u5b57\u7b26\u4e32\u62fc\u63a5\u6027\u80fd\u5b9e\u6d4b\uff1a\u57fa\u4e8e JMH \u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5 \u5728 Java \u5f00\u53d1\u4e2d\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\u64cd\u4f5c\u65e0\u5904\u4e0d\u5728\u3002\u4f60\u53ef\u80fd\u4f1a\u76f4\u63a5\u4f7f\u7528 + \uff0c\u4e5f\u53ef\u80fd\u9009\u62e9 StringBuilder \u6216 StringBuffer \u3002\u5b83\u4eec\u5728\u6027\u80fd\u4e0a\u7a76\u7adf\u6709\u4f55\u5dee\u522b\uff1f\u5728\u5faa\u73af\u4e2d\u62fc\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u54ea\u79cd\u65b9\u5f0f\u66f4\u9ad8\u6548\uff1f \u672c\u6587\u57fa\u4e8e JMH\uff08Java Microbenchmark Harness\uff09\u8fdb\u884c\u4e86\u7cfb\u7edf\u6027\u6d4b\u8bd5\uff0c\u5e76\u4f7f\u7528 GitHub Actions \u5728 Ubuntu \u73af\u5883\u4e2d\u5b9e\u6d4b\u4e86\u4e0d\u540c\u5b57\u7b26\u4e32\u62fc\u63a5\u65b9\u5f0f\u7684\u6027\u80fd\u3002 \ud83e\uddea \u6d4b\u8bd5\u76ee\u6807 \u6bd4\u8f83\u4ee5\u4e0b\u4e09\u79cd\u62fc\u63a5\u65b9\u5f0f\u5728\u9ad8\u9891\u573a\u666f\u4e0b\u7684\u6027\u80fd\u5dee\u5f02\uff1a + \u64cd\u4f5c\u7b26\uff08\u8bed\u6cd5\u7cd6\uff0c\u7f16\u8bd1\u671f\u8f6c\u4e3a StringBuilder.append \uff09 StringBuilder.append StringBuffer.append \ud83e\uddf0 \u9879\u76ee\u521b\u5efa\u4e0e\u914d\u7f6e\uff08Maven\uff09 1. \u521b\u5efa\u57fa\u7840\u5de5\u7a0b mvn archetype:generate \\ -DgroupId=com.xinchentechnote \\ -DartifactId=string-jmh \\ -DarchetypeArtifactId=maven-archetype-quickstart \\ -DinteractiveMode=false 2. \u914d\u7f6e pom.xml <dependencies> <dependency> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-core</artifactId> <version>1.37</version> </dependency> <dependency> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-generator-annprocess</artifactId> <version>1.37</version> <scope>provided</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>17</source> <target>17</target> <annotationProcessorPaths> <path> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-generator-annprocess</artifactId> <version>1.37</version> </path> </annotationProcessorPaths> </configuration> </plugin> </plugins> </build> \ud83d\udcc4 \u6d4b\u8bd5\u4ee3\u7801\u5b9e\u73b0 package com.xinchentechnote; import org.openjdk.jmh.annotations.*; import java.util.concurrent.TimeUnit; @BenchmarkMode({Mode.Throughput, Mode.AverageTime}) @OutputTimeUnit(TimeUnit.MICROSECONDS) @State(Scope.Thread) public class StringConcatBenchmark { private String str1 = \"Hello\"; private String str2 = \"World\"; private String str3 = \"Java\"; private int count = 100; @Benchmark public String testStringBuilder() { StringBuilder sb = new StringBuilder(); for (int i = 0; i < count; i++) { sb.append(str1); sb.append(str2); sb.append(str3); } return sb.toString(); } @Benchmark public String testStringBuffer() { StringBuffer sb = new StringBuffer(); for (int i = 0; i < count; i++) { sb.append(str1); sb.append(str2); sb.append(str3); } return sb.toString(); } @Benchmark public String testStringPlus() { String result = \"\"; for (int i = 0; i < count; i++) { result += str1; result += str2; result += str3; } return result; } } \ud83d\ude80 GitHub Actions \u81ea\u52a8\u5316\u6d4b\u8bd5\u914d\u7f6e name: JMH Benchmarks on: workflow_dispatch: jobs: benchmark: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-java@v3 with: distribution: temurin java-version: '17' cache: maven - run: mvn clean install -DskipTests - run: java -jar target/benchmarks.jar StringConcatBenchmark \ud83d\udcca \u5b9e\u6d4b\u7ed3\u679c\uff08Ubuntu + GitHub Actions\uff09 \ud83d\udcc8 \u541e\u5410\u91cf\u6d4b\u8bd5\uff08Throughput\uff09 \u5355\u4f4d\uff1a\u6bcf\u5fae\u79d2\u6267\u884c\u7684\u64cd\u4f5c\u6570\uff08ops/us\uff09 \u65b9\u6cd5 \u541e\u5410\u91cf StringBuilder 0.478 ops/us StringBuffer 0.448 ops/us + \u64cd\u4f5c\u7b26 \ud83d\udeab 0.199 ops/us \u23f1 \u5e73\u5747\u8017\u65f6\u6d4b\u8bd5\uff08AverageTime\uff09 \u5355\u4f4d\uff1a\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u8017\u65f6\uff08us/op\uff09 \u65b9\u6cd5 \u5e73\u5747\u8017\u65f6 StringBuilder 2.021 us/op StringBuffer 2.237 us/op + \u64cd\u4f5c\u7b26 \ud83d\udeab 5.244 us/op \ud83d\udd0d \u539f\u7406\u89e3\u6790 StringBuilder \uff1a\u975e\u7ebf\u7a0b\u5b89\u5168\u4f46\u6027\u80fd\u6700\u597d\uff0c\u63a8\u8350\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u3002 StringBuffer \uff1a\u7ebf\u7a0b\u5b89\u5168\u4f46\u6027\u80fd\u7565\u4f4e\u3002 + \u64cd\u4f5c\u7b26\uff1a\u867d\u7136\u76f4\u89c2\uff0c\u4f46\u5728\u5faa\u73af\u4e2d\u6781\u5176\u4f4e\u6548\uff0c\u4f1a\u9891\u7e41\u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\uff0c\u5e26\u6765 GC \u538b\u529b\u3002 \u2705 \u4f7f\u7528\u5efa\u8bae \u62fc\u63a5\u65b9\u5f0f \u4f18\u70b9 \u7f3a\u70b9 \u63a8\u8350\u573a\u666f StringBuilder \u6027\u80fd\u6700\u4f73 \u975e\u7ebf\u7a0b\u5b89\u5168 \u5355\u7ebf\u7a0b\u9ad8\u9891\u62fc\u63a5 StringBuffer \u7ebf\u7a0b\u5b89\u5168 \u6027\u80fd\u7565\u5dee \u591a\u7ebf\u7a0b\u62fc\u63a5\u573a\u666f + \u64cd\u4f5c\u7b26 \u7b80\u6d01\u76f4\u89c2 \u6162\u4e14 GC \u538b\u529b\u5927 \u4f4e\u9891\u7b80\u6613\u62fc\u63a5 \ud83c\udfc1 \u603b\u7ed3 \u672c\u6b21 JMH \u5b9e\u6d4b\u9a8c\u8bc1\u4e86\u5f00\u53d1\u7ecf\u9a8c\u4e2d\u7684\u6700\u4f73\u5b9e\u8df5\uff1a \u5728\u9ad8\u9891\u573a\u666f\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 StringBuilder \u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u3002 \ud83d\udca1 JMH \u5c0f\u77e5\u8bc6\uff1aJava \u5fae\u57fa\u51c6\u6d4b\u8bd5\u5229\u5668 JMH (Java Microbenchmark Harness) \u662f\u7531 Oracle \u548c OpenJDK \u56e2\u961f\u4e13\u4e3a Java \u7f16\u5199\u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5\u6846\u67b6\uff0c\u7528\u4e8e\u8861\u91cf Java \u65b9\u6cd5\u5728\u7eb3\u79d2\u5230\u5fae\u79d2\u7ea7\u522b\u7684\u6027\u80fd\u8868\u73b0\u3002JMH \u7279\u522b\u9002\u7528\u4e8e\u9700\u8981\u7cbe\u7ec6\u5206\u6790\u65b9\u6cd5\u8c03\u7528\u5f00\u9500\u3001\u7f16\u8bd1\u4f18\u5316\u3001\u526f\u4f5c\u7528\u7b49\u5bf9\u6027\u80fd\u5f71\u54cd\u7684\u573a\u666f\u3002 \u6838\u5fc3\u672f\u8bed\u4e0e\u6ce8\u89e3\u89e3\u91ca\uff1a \u6ce8\u89e3\u6216\u53c2\u6570 \u542b\u4e49 @Benchmark \u6807\u8bb0\u8981\u88ab\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002\u6bcf\u6b21\u8fd0\u884c\u90fd\u8c03\u7528\u5b83\u5e76\u6536\u96c6\u6027\u80fd\u6570\u636e\u3002 @BenchmarkMode \u8bbe\u7f6e\u57fa\u51c6\u6d4b\u8bd5\u7684\u6a21\u5f0f\uff08\u5982\u541e\u5410\u91cf\u3001\u5e73\u5747\u65f6\u95f4\u7b49\uff09\u3002\u53ef\u9009\u503c\u5305\u62ec\uff1a- Throughput : \u5355\u4f4d\u65f6\u95f4\u5185\u64cd\u4f5c\u6b21\u6570- AverageTime : \u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u8017\u65f6- SampleTime , SingleShotTime , AllModes @OutputTimeUnit \u8bbe\u7f6e\u8f93\u51fa\u7ed3\u679c\u7684\u65f6\u95f4\u5355\u4f4d\uff0c\u5982 TimeUnit.MILLISECONDS \u6216 MICROSECONDS \u3002 @State \u7528\u4e8e\u7ba1\u7406\u57fa\u51c6\u65b9\u6cd5\u6240\u9700\u7684\u72b6\u6001\u53d8\u91cf\u4f5c\u7528\u57df\u3002\u5e38\u7528 Scope.Thread \u8868\u793a\u6bcf\u7ebf\u7a0b\u72ec\u7acb\u72b6\u6001\u3002 @Fork \u8bbe\u7f6e\u6267\u884c\u51e0\u8f6e JVM \u542f\u52a8\u6765\u89c4\u907f JVM \u70ed\u8eab\u9636\u6bb5\u7684\u5f71\u54cd\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a 1~3\u3002 @Warmup \u9884\u70ed\u6b21\u6570\u4e0e\u6bcf\u6b21\u6301\u7eed\u65f6\u95f4\uff08JIT \u7f16\u8bd1\u4f18\u5316\u53d1\u751f\u5728\u6b64\u9636\u6bb5\uff09\u3002\u907f\u514d\u51b7\u542f\u52a8\u5f71\u54cd\u57fa\u51c6\u6570\u636e\u3002 @Measurement \u771f\u6b63\u91c7\u96c6\u6027\u80fd\u6570\u636e\u7684\u6b21\u6570\u548c\u6301\u7eed\u65f6\u95f4\u3002\u5efa\u8bae\u81f3\u5c11 5 \u6b21 \u00d7 1s+ \u3002 \u63a8\u8350\u914d\u7f6e\u53c2\u6570\u8bf4\u660e\uff1a @BenchmarkMode({Mode.Throughput, Mode.AverageTime}) // \u540c\u65f6\u6d4b\u541e\u5410\u91cf\u548c\u5e73\u5747\u8017\u65f6 @OutputTimeUnit(TimeUnit.MICROSECONDS) // \u8f93\u51fa\u5fae\u79d2\u4e3a\u5355\u4f4d @State(Scope.Thread) // \u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u7acb\u72b6\u6001 @Fork(1) // \u542f\u52a8 1 \u6b21 JVM @Warmup(iterations = 5, time = 1) // \u9884\u70ed 5 \u6b21\uff0c\u6bcf\u6b21 1 \u79d2 @Measurement(iterations = 5, time = 1) // \u91c7\u6837 5 \u6b21\uff0c\u6bcf\u6b21 1 \u79d2 \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7b80\u5355\u7528 System.currentTimeMillis\uff1f \u56e0\u4e3a JVM \u542f\u52a8\u521d\u671f JIT \u7f16\u8bd1\u672a\u5b8c\u6210\u3001\u5185\u8054\u5c1a\u672a\u5c55\u5f00\u3001\u9003\u9038\u5206\u6790\u7b49\u4f18\u5316\u673a\u5236\u5c1a\u672a\u4ecb\u5165\uff0c\u521d\u59cb\u8fd0\u884c\u7684\u8017\u65f6\u975e\u5e38\u4e0d\u7a33\u5b9a\u3002\u800c JMH \u901a\u8fc7\uff1a \u81ea\u52a8 warm-up \u9884\u70ed\u9636\u6bb5\uff1b \u591a\u8f6e fork JVM \u9694\u79bb\u4f18\u5316\u5f71\u54cd\uff1b \u7edf\u8ba1\u8bef\u5dee\u548c\u6ce2\u52a8\u8303\u56f4\uff08Error\uff09\uff1b \u786e\u4fdd\u4e86\u6d4b\u5f97\u7ed3\u679c\u66f4\u771f\u5b9e\u3001\u66f4\u63a5\u8fd1\u5e94\u7528\u5b9e\u9645\u8868\u73b0\u3002 \u5e0c\u671b\u672c\u6587\u80fd\u4e3a\u4f60\u5728\u65e5\u5e38\u5f00\u53d1\u4e0e\u6027\u80fd\u4f18\u5316\u4e2d\u63d0\u4f9b\u91cf\u5316\u53c2\u8003\uff01","title":"Java \u5b57\u7b26\u4e32\u62fc\u63a5\u6027\u80fd\u5b9e\u6d4b\uff1a\u57fa\u4e8e JMH \u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5"},{"location":"jmh/string-concat-jmh-benchmark/#java-jmh","text":"\u5728 Java \u5f00\u53d1\u4e2d\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\u64cd\u4f5c\u65e0\u5904\u4e0d\u5728\u3002\u4f60\u53ef\u80fd\u4f1a\u76f4\u63a5\u4f7f\u7528 + \uff0c\u4e5f\u53ef\u80fd\u9009\u62e9 StringBuilder \u6216 StringBuffer \u3002\u5b83\u4eec\u5728\u6027\u80fd\u4e0a\u7a76\u7adf\u6709\u4f55\u5dee\u522b\uff1f\u5728\u5faa\u73af\u4e2d\u62fc\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u54ea\u79cd\u65b9\u5f0f\u66f4\u9ad8\u6548\uff1f \u672c\u6587\u57fa\u4e8e JMH\uff08Java Microbenchmark Harness\uff09\u8fdb\u884c\u4e86\u7cfb\u7edf\u6027\u6d4b\u8bd5\uff0c\u5e76\u4f7f\u7528 GitHub Actions \u5728 Ubuntu \u73af\u5883\u4e2d\u5b9e\u6d4b\u4e86\u4e0d\u540c\u5b57\u7b26\u4e32\u62fc\u63a5\u65b9\u5f0f\u7684\u6027\u80fd\u3002","title":"Java \u5b57\u7b26\u4e32\u62fc\u63a5\u6027\u80fd\u5b9e\u6d4b\uff1a\u57fa\u4e8e JMH \u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5"},{"location":"jmh/string-concat-jmh-benchmark/#_1","text":"\u6bd4\u8f83\u4ee5\u4e0b\u4e09\u79cd\u62fc\u63a5\u65b9\u5f0f\u5728\u9ad8\u9891\u573a\u666f\u4e0b\u7684\u6027\u80fd\u5dee\u5f02\uff1a + \u64cd\u4f5c\u7b26\uff08\u8bed\u6cd5\u7cd6\uff0c\u7f16\u8bd1\u671f\u8f6c\u4e3a StringBuilder.append \uff09 StringBuilder.append StringBuffer.append","title":"\ud83e\uddea \u6d4b\u8bd5\u76ee\u6807"},{"location":"jmh/string-concat-jmh-benchmark/#maven","text":"","title":"\ud83e\uddf0 \u9879\u76ee\u521b\u5efa\u4e0e\u914d\u7f6e\uff08Maven\uff09"},{"location":"jmh/string-concat-jmh-benchmark/#1","text":"mvn archetype:generate \\ -DgroupId=com.xinchentechnote \\ -DartifactId=string-jmh \\ -DarchetypeArtifactId=maven-archetype-quickstart \\ -DinteractiveMode=false","title":"1. \u521b\u5efa\u57fa\u7840\u5de5\u7a0b"},{"location":"jmh/string-concat-jmh-benchmark/#2-pomxml","text":"<dependencies> <dependency> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-core</artifactId> <version>1.37</version> </dependency> <dependency> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-generator-annprocess</artifactId> <version>1.37</version> <scope>provided</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>17</source> <target>17</target> <annotationProcessorPaths> <path> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-generator-annprocess</artifactId> <version>1.37</version> </path> </annotationProcessorPaths> </configuration> </plugin> </plugins> </build>","title":"2. \u914d\u7f6e pom.xml"},{"location":"jmh/string-concat-jmh-benchmark/#_2","text":"package com.xinchentechnote; import org.openjdk.jmh.annotations.*; import java.util.concurrent.TimeUnit; @BenchmarkMode({Mode.Throughput, Mode.AverageTime}) @OutputTimeUnit(TimeUnit.MICROSECONDS) @State(Scope.Thread) public class StringConcatBenchmark { private String str1 = \"Hello\"; private String str2 = \"World\"; private String str3 = \"Java\"; private int count = 100; @Benchmark public String testStringBuilder() { StringBuilder sb = new StringBuilder(); for (int i = 0; i < count; i++) { sb.append(str1); sb.append(str2); sb.append(str3); } return sb.toString(); } @Benchmark public String testStringBuffer() { StringBuffer sb = new StringBuffer(); for (int i = 0; i < count; i++) { sb.append(str1); sb.append(str2); sb.append(str3); } return sb.toString(); } @Benchmark public String testStringPlus() { String result = \"\"; for (int i = 0; i < count; i++) { result += str1; result += str2; result += str3; } return result; } }","title":"\ud83d\udcc4 \u6d4b\u8bd5\u4ee3\u7801\u5b9e\u73b0"},{"location":"jmh/string-concat-jmh-benchmark/#github-actions","text":"name: JMH Benchmarks on: workflow_dispatch: jobs: benchmark: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-java@v3 with: distribution: temurin java-version: '17' cache: maven - run: mvn clean install -DskipTests - run: java -jar target/benchmarks.jar StringConcatBenchmark","title":"\ud83d\ude80 GitHub Actions \u81ea\u52a8\u5316\u6d4b\u8bd5\u914d\u7f6e"},{"location":"jmh/string-concat-jmh-benchmark/#ubuntu-github-actions","text":"","title":"\ud83d\udcca \u5b9e\u6d4b\u7ed3\u679c\uff08Ubuntu + GitHub Actions\uff09"},{"location":"jmh/string-concat-jmh-benchmark/#throughput","text":"\u5355\u4f4d\uff1a\u6bcf\u5fae\u79d2\u6267\u884c\u7684\u64cd\u4f5c\u6570\uff08ops/us\uff09 \u65b9\u6cd5 \u541e\u5410\u91cf StringBuilder 0.478 ops/us StringBuffer 0.448 ops/us + \u64cd\u4f5c\u7b26 \ud83d\udeab 0.199 ops/us","title":"\ud83d\udcc8 \u541e\u5410\u91cf\u6d4b\u8bd5\uff08Throughput\uff09"},{"location":"jmh/string-concat-jmh-benchmark/#averagetime","text":"\u5355\u4f4d\uff1a\u6bcf\u6b21\u64cd\u4f5c\u7684\u5e73\u5747\u8017\u65f6\uff08us/op\uff09 \u65b9\u6cd5 \u5e73\u5747\u8017\u65f6 StringBuilder 2.021 us/op StringBuffer 2.237 us/op + \u64cd\u4f5c\u7b26 \ud83d\udeab 5.244 us/op","title":"\u23f1 \u5e73\u5747\u8017\u65f6\u6d4b\u8bd5\uff08AverageTime\uff09"},{"location":"jmh/string-concat-jmh-benchmark/#_3","text":"StringBuilder \uff1a\u975e\u7ebf\u7a0b\u5b89\u5168\u4f46\u6027\u80fd\u6700\u597d\uff0c\u63a8\u8350\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u3002 StringBuffer \uff1a\u7ebf\u7a0b\u5b89\u5168\u4f46\u6027\u80fd\u7565\u4f4e\u3002 + \u64cd\u4f5c\u7b26\uff1a\u867d\u7136\u76f4\u89c2\uff0c\u4f46\u5728\u5faa\u73af\u4e2d\u6781\u5176\u4f4e\u6548\uff0c\u4f1a\u9891\u7e41\u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\uff0c\u5e26\u6765 GC \u538b\u529b\u3002","title":"\ud83d\udd0d \u539f\u7406\u89e3\u6790"},{"location":"jmh/string-concat-jmh-benchmark/#_4","text":"\u62fc\u63a5\u65b9\u5f0f \u4f18\u70b9 \u7f3a\u70b9 \u63a8\u8350\u573a\u666f StringBuilder \u6027\u80fd\u6700\u4f73 \u975e\u7ebf\u7a0b\u5b89\u5168 \u5355\u7ebf\u7a0b\u9ad8\u9891\u62fc\u63a5 StringBuffer \u7ebf\u7a0b\u5b89\u5168 \u6027\u80fd\u7565\u5dee \u591a\u7ebf\u7a0b\u62fc\u63a5\u573a\u666f + \u64cd\u4f5c\u7b26 \u7b80\u6d01\u76f4\u89c2 \u6162\u4e14 GC \u538b\u529b\u5927 \u4f4e\u9891\u7b80\u6613\u62fc\u63a5","title":"\u2705 \u4f7f\u7528\u5efa\u8bae"},{"location":"jmh/string-concat-jmh-benchmark/#_5","text":"\u672c\u6b21 JMH \u5b9e\u6d4b\u9a8c\u8bc1\u4e86\u5f00\u53d1\u7ecf\u9a8c\u4e2d\u7684\u6700\u4f73\u5b9e\u8df5\uff1a \u5728\u9ad8\u9891\u573a\u666f\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 StringBuilder \u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u3002","title":"\ud83c\udfc1 \u603b\u7ed3"},{"location":"jmh/string-concat-jmh-benchmark/#jmh-java","text":"JMH (Java Microbenchmark Harness) \u662f\u7531 Oracle \u548c OpenJDK \u56e2\u961f\u4e13\u4e3a Java \u7f16\u5199\u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5\u6846\u67b6\uff0c\u7528\u4e8e\u8861\u91cf Java \u65b9\u6cd5\u5728\u7eb3\u79d2\u5230\u5fae\u79d2\u7ea7\u522b\u7684\u6027\u80fd\u8868\u73b0\u3002JMH \u7279\u522b\u9002\u7528\u4e8e\u9700\u8981\u7cbe\u7ec6\u5206\u6790\u65b9\u6cd5\u8c03\u7528\u5f00\u9500\u3001\u7f16\u8bd1\u4f18\u5316\u3001\u526f\u4f5c\u7528\u7b49\u5bf9\u6027\u80fd\u5f71\u54cd\u7684\u573a\u666f\u3002","title":"\ud83d\udca1 JMH \u5c0f\u77e5\u8bc6\uff1aJava \u5fae\u57fa\u51c6\u6d4b\u8bd5\u5229\u5668"},{"location":"jmh/string-concat-jmh-benchmark/#_6","text":"\u6ce8\u89e3\u6216\u53c2\u6570 \u542b\u4e49 @Benchmark \u6807\u8bb0\u8981\u88ab\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002\u6bcf\u6b21\u8fd0\u884c\u90fd\u8c03\u7528\u5b83\u5e76\u6536\u96c6\u6027\u80fd\u6570\u636e\u3002 @BenchmarkMode \u8bbe\u7f6e\u57fa\u51c6\u6d4b\u8bd5\u7684\u6a21\u5f0f\uff08\u5982\u541e\u5410\u91cf\u3001\u5e73\u5747\u65f6\u95f4\u7b49\uff09\u3002\u53ef\u9009\u503c\u5305\u62ec\uff1a- Throughput : \u5355\u4f4d\u65f6\u95f4\u5185\u64cd\u4f5c\u6b21\u6570- AverageTime : \u6bcf\u4e2a\u64cd\u4f5c\u5e73\u5747\u8017\u65f6- SampleTime , SingleShotTime , AllModes @OutputTimeUnit \u8bbe\u7f6e\u8f93\u51fa\u7ed3\u679c\u7684\u65f6\u95f4\u5355\u4f4d\uff0c\u5982 TimeUnit.MILLISECONDS \u6216 MICROSECONDS \u3002 @State \u7528\u4e8e\u7ba1\u7406\u57fa\u51c6\u65b9\u6cd5\u6240\u9700\u7684\u72b6\u6001\u53d8\u91cf\u4f5c\u7528\u57df\u3002\u5e38\u7528 Scope.Thread \u8868\u793a\u6bcf\u7ebf\u7a0b\u72ec\u7acb\u72b6\u6001\u3002 @Fork \u8bbe\u7f6e\u6267\u884c\u51e0\u8f6e JVM \u542f\u52a8\u6765\u89c4\u907f JVM \u70ed\u8eab\u9636\u6bb5\u7684\u5f71\u54cd\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a 1~3\u3002 @Warmup \u9884\u70ed\u6b21\u6570\u4e0e\u6bcf\u6b21\u6301\u7eed\u65f6\u95f4\uff08JIT \u7f16\u8bd1\u4f18\u5316\u53d1\u751f\u5728\u6b64\u9636\u6bb5\uff09\u3002\u907f\u514d\u51b7\u542f\u52a8\u5f71\u54cd\u57fa\u51c6\u6570\u636e\u3002 @Measurement \u771f\u6b63\u91c7\u96c6\u6027\u80fd\u6570\u636e\u7684\u6b21\u6570\u548c\u6301\u7eed\u65f6\u95f4\u3002\u5efa\u8bae\u81f3\u5c11 5 \u6b21 \u00d7 1s+ \u3002","title":"\u6838\u5fc3\u672f\u8bed\u4e0e\u6ce8\u89e3\u89e3\u91ca\uff1a"},{"location":"jmh/string-concat-jmh-benchmark/#_7","text":"@BenchmarkMode({Mode.Throughput, Mode.AverageTime}) // \u540c\u65f6\u6d4b\u541e\u5410\u91cf\u548c\u5e73\u5747\u8017\u65f6 @OutputTimeUnit(TimeUnit.MICROSECONDS) // \u8f93\u51fa\u5fae\u79d2\u4e3a\u5355\u4f4d @State(Scope.Thread) // \u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u7acb\u72b6\u6001 @Fork(1) // \u542f\u52a8 1 \u6b21 JVM @Warmup(iterations = 5, time = 1) // \u9884\u70ed 5 \u6b21\uff0c\u6bcf\u6b21 1 \u79d2 @Measurement(iterations = 5, time = 1) // \u91c7\u6837 5 \u6b21\uff0c\u6bcf\u6b21 1 \u79d2","title":"\u63a8\u8350\u914d\u7f6e\u53c2\u6570\u8bf4\u660e\uff1a"},{"location":"jmh/string-concat-jmh-benchmark/#systemcurrenttimemillis","text":"\u56e0\u4e3a JVM \u542f\u52a8\u521d\u671f JIT \u7f16\u8bd1\u672a\u5b8c\u6210\u3001\u5185\u8054\u5c1a\u672a\u5c55\u5f00\u3001\u9003\u9038\u5206\u6790\u7b49\u4f18\u5316\u673a\u5236\u5c1a\u672a\u4ecb\u5165\uff0c\u521d\u59cb\u8fd0\u884c\u7684\u8017\u65f6\u975e\u5e38\u4e0d\u7a33\u5b9a\u3002\u800c JMH \u901a\u8fc7\uff1a \u81ea\u52a8 warm-up \u9884\u70ed\u9636\u6bb5\uff1b \u591a\u8f6e fork JVM \u9694\u79bb\u4f18\u5316\u5f71\u54cd\uff1b \u7edf\u8ba1\u8bef\u5dee\u548c\u6ce2\u52a8\u8303\u56f4\uff08Error\uff09\uff1b \u786e\u4fdd\u4e86\u6d4b\u5f97\u7ed3\u679c\u66f4\u771f\u5b9e\u3001\u66f4\u63a5\u8fd1\u5e94\u7528\u5b9e\u9645\u8868\u73b0\u3002 \u5e0c\u671b\u672c\u6587\u80fd\u4e3a\u4f60\u5728\u65e5\u5e38\u5f00\u53d1\u4e0e\u6027\u80fd\u4f18\u5316\u4e2d\u63d0\u4f9b\u91cf\u5316\u53c2\u8003\uff01","title":"\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7b80\u5355\u7528 System.currentTimeMillis\uff1f"}]}